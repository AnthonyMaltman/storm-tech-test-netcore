@using Todo.Data.Entities
@using Todo.Data
@using Todo.Services
@using Todo.Views.TodoItem
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@inject ApplicationDbContext dbContext

@{
    ViewData["Title"] = $"List: {Model.TodoListTitle}";

    var TodoItems = Model.Items.OrderBy(x => x.Importance);
    if (Model.OrderByRank)
    {
        TodoItems = Model.Items.OrderBy(x => x.Importance).ThenBy(x => x.Rank);
    }
}

    <script type="text/javascript">
    function GetGravatarPrfile(emailHash, itemId) {
        var serviceURL = "https://www.gravatar.com/" + emailHash + ".json";

        $.ajax({
            dataType: "jsonp",
            type: "GET",
            url: serviceURL,
            success: successFunc
        });

        function successFunc(data, status) {
            try {
                $('#' + itemId + ' .name').html(data.entry[0].displayName);
                $('#' + itemId + ' .image').attr('src', data.entry[0].photos[0].value);
            }
            catch (err) {
                $('#' + itemId + ' .name').html('');
                $('#' + itemId + ' .image').attr('src', '');
            }
        }
    };
        $(document).ready(function () {
            $("#newTodoItem").submit(function (event) {

                event.preventDefault();

                if ($('#Title').val().trim() === '') {
                    alert("please enter a title");
                    return false;
                }

                var form = $("#newTodoItem").serialize();

                $.ajax({
                    data: form,
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    type: "POST",
                    url: '@Url.Action("CreateTodoItem")',
                    success: successFunc,
                    error: errorFunc
                });

                function successFunc(data, status) {
                }
                function errorFunc(data) {
                    alert(data);
                }
            });
        });

        $(function () {
            $(".list-group").sortable({
                stop: function (event, ui) {

                    $(".list-group li").each(function (index, element) {
                        var hiddenInput = $(element).find(".Rank");
                        hiddenInput.val(index);
                    });

                    var form = $("#saveRankForm").serialize();

                    $.ajax({
                        data: form,
                        dataType: 'json',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        type: "POST",
                        url: '@Url.Action("SaveRankOrder")',
                        success: successFunc,
                        error: errorFunc
                    });

                    function successFunc(data, status) {
                    }

                    function errorFunc(data) {
                        alert(data);
                    }
                }
            });
        });

    </script>

<h2>@ViewData["Title"]</h2>

<div class="col-md-4">

    <section>
        <form id="newTodoItem" method="post">
            <label>Add new item</label>
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.TodoListId)

            <div class="form-group">
                <label asp-for="Title"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Importance"></label>
                @Html.DropDownListFor(
                    m => m.Importance,
                    SelectListConvenience.ImportanceSelectListItems,
                    new { @class = "form-control" }
                    )
                <span asp-validation-for="Importance" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ResponsiblePartyId"></label>
                @Html.DropDownListFor(
                    m => m.ResponsiblePartyId,
                    dbContext.UserSelectListItems(),
                    new { @class = "form-control" }
                    )
                <span asp-validation-for="ResponsiblePartyId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-default">Save</button>
            </div>

        </form>
    </section>
</div>
<div class="col-md-6">

    <form id="saveRankForm" method="post">

        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.TodoListId)

        <ul class="list-group" id="sortMe">

            <li class="list-group-item">
                <div class="row">
                    <a asp-action="Detail" class="btn btn-default pull-right" asp-route-todoListId="@Model.TodoListId" asp-route-displayDoneItems="@(!Model.DisplayDoneItems)" asp-route-orderByRank="@(Model.OrderByRank)">@(Model.DisplayDoneItems ? "Hide Done Items" : "Show all")</a>
                    <a asp-action="Detail" class="btn btn-default pull-right" asp-route-todoListId="@Model.TodoListId" asp-route-displayDoneItems="@(Model.DisplayDoneItems)" asp-route-orderByRank="@(!Model.OrderByRank)">@(Model.OrderByRank ? "Order By Input" : "Order By Rank")</a>
                </div>
            </li>

            @{ 
                var items = TodoItems.ToList();
                for(var i = 0; i < items.Count ; i++)
                {
                    string contextualClass;
                    switch (items[i].Importance)
                    {
                        case Importance.High:
                            contextualClass = "list-group-item-danger";
                            break;
                        case Importance.Low:
                            contextualClass = "list-group-item-info";
                            break;
                        default:
                            contextualClass = "";
                            break;
                    }

                    <li class="list-group-item @contextualClass">
                        <div class="row">

                            @Html.HiddenFor(m => items[i].Rank, new { @class="Rank" })
                            @Html.HiddenFor(m => items[i].TodoItemId)

                            <div class="col-md-7">
                                <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@items[i].TodoItemId">
                                    @if (items[i].IsDone)
                                    {
                                        <s>@items[i].Title</s>
                                    }
                                    else
                                    {
                                        <text>@items[i].Title</text>
                                    }
                                </a>
                            </div>

                            <div class="col-md-5 text-right">
                                <medium>
                                    <script type='text/javascript'>
                                    GetGravatarPrfile('@Gravatar.GetHash(items[i].ResponsibleParty.Email)', '@items[i].TodoItemId')
                                    </script>

                                    <div id="@items[i].TodoItemId">
                                        <div class="name"></div>
                                        <div class="emailAddress">@items[i].ResponsibleParty.UserName</div>
                                        <img height="40" class="image" src="https://www.gravatar.com/avatar/@Gravatar.GetHash(items[i].ResponsibleParty.Email)?s=30" />
                                    </div>

                                </medium>
                            </div>
                        </div>

                    </li>
                }}
            </ul>
    </form>
</div>